h1. How to use it

p. All this examples are generated in test/test_technical_readme.rb.





h2. Simple graph

p. First thing we need to have data to show on graph, for example something like:

<pre>
<code>
simple_data_array = [
  { :x => 0, :y => 0 },
  { :x => 1, :y => 1 },
  { :x => 2, :y => 2 },
  { :x => 3, :y => 2 },
  { :x => 4, :y => 1 },
  { :x => 5, :y => 0 },
]
</code>
</pre>

p. If you want to put this data on graph you need to create TechnicalGraph object

<pre>
<code>
tg = TechnicalGraph.new
</code>
</pre>

p. and add a layer.

<pre>
<code>
tg.add_layer(simple_data_array)
</code>
</pre>

p. We added data but we don't see anything. Now we have to render graph and save it to file.

<pre>
<code>
tg.render
file_name = 'samples/readme/01_simplest.png'
tg.image_drawer.save_to_file(file_name)
</code>
</pre>

p. And we got our first graph with one layer without any options changes, a bit raw.

!https://github.com/akwiatkowski/technical_graph/raw/master/samples/readme/01_simplest.png((01) simple graph)!





h2. More layers
-----------

p. Maybe example with two layers?

<pre>
<code>
simple_data_array = [
  { :x => 0, :y => 0 },
  { :x => 1, :y => 1 },
  { :x => 2, :y => 2 },
  { :x => 3, :y => 2 },
  { :x => 4, :y => 1 },
  { :x => 5, :y => 0 },
]

simple_data_array_b = [
  { :x => 0.5, :y => 0.5 },
  { :x => 1.5, :y => 0.5 },
  { :x => 2.5, :y => 1.5 },
  { :x => 3.5, :y => 1.0 },
  { :x => 4.5, :y => 1.5 },
  { :x => 5.5, :y => 1.5 },
]

tg = TechnicalGraph.new
tg.add_layer(simple_data_array)
tg.add_layer(simple_data_array_b)
tg.render
file_name = 'samples/readme/02_two_layers.png'
tg.image_drawer.save_to_file(file_name)
</code>
</pre>


!https://github.com/akwiatkowski/technical_graph/raw/master/samples/readme/02_two_layers.png((02) simple graph)!




h2. Ranges

p. On default ranges are calculated automatically so all points are visible. You can override ranges setting.

<pre>
<code>
simple_data_array = [
  { :x => 0, :y => 0 },
  { :x => 1, :y => 1 },
  { :x => 2, :y => 2 },
  { :x => 3, :y => 2 },
  { :x => 4, :y => 1 },
  { :x => 5, :y => 0 },
]

tg = TechnicalGraph.new(
  {
    :x_min => -2,
    :x_max => 10,
    :y_min => -1,
    :y_max => 10,
  })

tg.add_layer(simple_data_array)
tg.render
file_name = 'samples/readme/03_changed_ranges.png'
tg.image_drawer.save_to_file(file_name)
</code>
</pre>

!https://github.com/akwiatkowski/technical_graph/raw/master/samples/readme/03_changed_ranges.png((03) changed ranges)!


p. Keep in mind that ranges will be changed but any point of graph can enlarge ranges that all points will be visible, unless...





h2. Fixed ranges

p. You can turn off automatic range enlargement algorithm by using:

<pre>
<code>
options[:xy_behaviour] = :fixed
</code>
</pre>

Example:

<pre>
<code>
simple_data_array = [
  { :x => 0, :y => 0 },
  { :x => 1, :y => 1 },
  { :x => 2, :y => 2 },
  { :x => 3, :y => 2 },
  { :x => 4, :y => 1 },
  { :x => 5, :y => 0 },
]

tg = TechnicalGraph.new(
  {
    :x_min => 1,
    :x_max => 2,
    :y_min => 1,
    :y_max => 2,
    :xy_behaviour => :fixed,
  })

tg.add_layer(simple_data_array)
tg.render
file_name = 'samples/readme/04_changed_ranges_fixed.png'
tg.image_drawer.save_to_file(file_name)
</code>
</pre>

!https://github.com/akwiatkowski/technical_graph/raw/master/samples/readme/04_changed_ranges_fixed.png((04) changed ranges)!




h2. Axis interval - fixed count

p. Axis can be calculated using two algorithms:

# fixed interval - axis is every some distance,
# fixed count - there is fixed amount of axis on graph.

p. Keep in mind that where is X (parameter) and Y (value) axis. If you want to set fixed amount you should set
options[:x_axis_fixed_interval] and/or options[:y_axis_fixed_interval] to false, like in the example below.

<pre>
<code>
simple_data_array = [
  { :x => 0, :y => 0 },
  { :x => 1, :y => 1 },
  { :x => 2, :y => 2 },
  { :x => 3, :y => 2 },
  { :x => 4, :y => 1 },
  { :x => 5, :y => 0 },
]

tg = TechnicalGraph.new(
  {
    :x_axis_fixed_interval => false,
    :y_axis_fixed_interval => false,
    :y_axis_count => 20,
    :x_axis_count => 20,
  })

tg.add_layer(simple_data_array)
tg.render
file_name = 'samples/readme/05_axis_fixed_amount.png'
tg.image_drawer.save_to_file(file_name)
</code>
</pre>

!https://github.com/akwiatkowski/technical_graph/raw/master/samples/readme/05_axis_fixed_amount.png((05) fixed axis count)!

